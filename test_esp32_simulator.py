#!/usr/bin/env python3
"""
Script de prueba para simular un ESP32 enviando historias al servidor.
√ösalo para probar el sitio web sin necesidad del ESP32 real.
"""

import asyncio
import websockets
import json
import time
from datetime import datetime

# Configuraci√≥n
SERVER_HOST = 'localhost'
ESP32_PORT = 8766

# Historias de prueba
SAMPLE_STORIES = [
    "Hab√≠a una vez un robot que so√±aba con ser humano, pero entonces apareci√≥ un gato cibern√©tico que cambi√≥ todo, sin embargo, la historia tom√≥ un giro extra√±o cuando descubrieron la verdad, y ese es el final de esta historia.",
    
    "En un laboratorio de la facultad, los estudiantes crearon un ESP32 m√°gico, luego algo inesperado sucedi√≥ con los sensores, y de repente todo cambi√≥ cuando los microcontroladores cobraron vida, y ese es el final de esta historia.",
    
    "El proyecto de rob√≥tica colectiva comenz√≥ como un experimento, pero entonces los robots empezaron a comunicarse entre s√≠, sin embargo, decidieron colaborar para crear arte digital, y ese es el final de esta historia.",
    
    "Un d√≠a cualquiera en la clase de programaci√≥n, los ESP32s se rebelaron contra sus creadores, luego formaron una red de comunicaci√≥n secreta, y finalmente descubrieron que su prop√≥sito era crear historias colaborativas, y ese es el final de esta historia.",
    
    "En el mundo de los microcontroladores, exist√≠a una leyenda sobre el cad√°ver exquisito digital, pero nadie sab√≠a c√≥mo funcionaba hasta que cuatro ESP32s se unieron, sin embargo, su colaboraci√≥n super√≥ todas las expectativas, y ese es el final de esta historia."
]

async def simulate_esp32():
    """Simula un ESP32 enviando historias al servidor"""
    print("ü§ñ Simulador ESP32 - Cad√°ver Exquisito")
    print(f"üîå Conectando a ws://{SERVER_HOST}:{ESP32_PORT}")
    
    try:
        async with websockets.connect(f"ws://{SERVER_HOST}:{ESP32_PORT}") as websocket:
            print("‚úÖ Conectado al servidor como ESP32")
            
            # Esperar confirmaci√≥n del servidor
            response = await websocket.recv()
            print(f"üì® Servidor: {response}")
            
            # Enviar historias cada cierto tiempo
            for i, story in enumerate(SAMPLE_STORIES, 1):
                print(f"\nüìù Enviando historia {i}/{len(SAMPLE_STORIES)}...")
                print(f"Historia: {story[:50]}...")
                
                # Enviar como JSON estructurado
                message = {
                    "type": "final_story",
                    "message": story,
                    "timestamp": datetime.now().isoformat(),
                    "esp32_id": "ESP32_FINAL",
                    "story_number": i
                }
                
                await websocket.send(json.dumps(message))
                print("‚úÖ Historia enviada")
                
                # Esperar antes de enviar la siguiente
                if i < len(SAMPLE_STORIES):
                    wait_time = 10
                    print(f"‚è±Ô∏è  Esperando {wait_time} segundos antes de la siguiente historia...")
                    await asyncio.sleep(wait_time)
            
            print("\nüéâ Todas las historias enviadas!")
            print("üí¨ El simulador seguir√° activo. Presiona Ctrl+C para salir.")
            
            # Mantener la conexi√≥n activa
            try:
                await websocket.wait_closed()
            except KeyboardInterrupt:
                print("\nüëã Simulador detenido por el usuario")
                
    except ConnectionRefusedError:
        print("‚ùå No se pudo conectar al servidor.")
        print(f"   Aseg√∫rate de que websocket_server.py est√© ejecut√°ndose.")
    except Exception as e:
        print(f"‚ùå Error: {e}")

async def send_single_story():
    """Env√≠a una sola historia para prueba r√°pida"""
    print("‚ö° Enviando historia de prueba r√°pida...")
    
    try:
        async with websockets.connect(f"ws://{SERVER_HOST}:{ESP32_PORT}") as websocket:
            story = SAMPLE_STORIES[0]
            message = {
                "type": "final_story",
                "message": story,
                "timestamp": datetime.now().isoformat(),
                "esp32_id": "ESP32_TEST"
            }
            
            await websocket.send(json.dumps(message))
            print("‚úÖ Historia de prueba enviada!")
            
    except Exception as e:
        print(f"‚ùå Error enviando historia: {e}")

def main():
    """Funci√≥n principal con men√∫ de opciones"""
    print("üöÄ Simulador ESP32 para Cad√°ver Exquisito")
    print("=" * 40)
    print("1. Enviar historias autom√°ticamente (cada 10 segundos)")
    print("2. Enviar una historia de prueba")
    print("3. Salir")
    
    try:
        opcion = input("\nElige una opci√≥n (1-3): ").strip()
        
        if opcion == "1":
            asyncio.run(simulate_esp32())
        elif opcion == "2":
            asyncio.run(send_single_story())
        elif opcion == "3":
            print("üëã ¬°Hasta luego!")
        else:
            print("‚ùå Opci√≥n no v√°lida")
            
    except KeyboardInterrupt:
        print("\nüëã ¬°Hasta luego!")
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    main()
